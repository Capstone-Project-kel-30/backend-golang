// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	http2 "golang.org/x/net/http2"
)

// WriteScheduler is an autogenerated mock type for the WriteScheduler type
type WriteScheduler struct {
	mock.Mock
}

// AdjustStream provides a mock function with given fields: streamID, priority
func (_m *WriteScheduler) AdjustStream(streamID uint32, priority http2.PriorityParam) {
	_m.Called(streamID, priority)
}

// CloseStream provides a mock function with given fields: streamID
func (_m *WriteScheduler) CloseStream(streamID uint32) {
	_m.Called(streamID)
}

// OpenStream provides a mock function with given fields: streamID, options
func (_m *WriteScheduler) OpenStream(streamID uint32, options http2.OpenStreamOptions) {
	_m.Called(streamID, options)
}

// Pop provides a mock function with given fields:
func (_m *WriteScheduler) Pop() (http2.FrameWriteRequest, bool) {
	ret := _m.Called()

	var r0 http2.FrameWriteRequest
	if rf, ok := ret.Get(0).(func() http2.FrameWriteRequest); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(http2.FrameWriteRequest)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Push provides a mock function with given fields: wr
func (_m *WriteScheduler) Push(wr http2.FrameWriteRequest) {
	_m.Called(wr)
}

type mockConstructorTestingTNewWriteScheduler interface {
	mock.TestingT
	Cleanup(func())
}

// NewWriteScheduler creates a new instance of WriteScheduler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWriteScheduler(t mockConstructorTestingTNewWriteScheduler) *WriteScheduler {
	mock := &WriteScheduler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
