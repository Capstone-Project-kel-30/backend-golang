// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	bytes "bytes"

	http2 "golang.org/x/net/http2"
	hpack "golang.org/x/net/http2/hpack"

	mock "github.com/stretchr/testify/mock"
)

// writeContext is an autogenerated mock type for the writeContext type
type writeContext struct {
	mock.Mock
}

// CloseConn provides a mock function with given fields:
func (_m *writeContext) CloseConn() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Flush provides a mock function with given fields:
func (_m *writeContext) Flush() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Framer provides a mock function with given fields:
func (_m *writeContext) Framer() *http2.Framer {
	ret := _m.Called()

	var r0 *http2.Framer
	if rf, ok := ret.Get(0).(func() *http2.Framer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http2.Framer)
		}
	}

	return r0
}

// HeaderEncoder provides a mock function with given fields:
func (_m *writeContext) HeaderEncoder() (*hpack.Encoder, *bytes.Buffer) {
	ret := _m.Called()

	var r0 *hpack.Encoder
	if rf, ok := ret.Get(0).(func() *hpack.Encoder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hpack.Encoder)
		}
	}

	var r1 *bytes.Buffer
	if rf, ok := ret.Get(1).(func() *bytes.Buffer); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*bytes.Buffer)
		}
	}

	return r0, r1
}

type mockConstructorTestingTnewWriteContext interface {
	mock.TestingT
	Cleanup(func())
}

// newWriteContext creates a new instance of writeContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newWriteContext(t mockConstructorTestingTnewWriteContext) *writeContext {
	mock := &writeContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
