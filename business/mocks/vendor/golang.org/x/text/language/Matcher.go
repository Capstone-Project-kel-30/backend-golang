// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	language "golang.org/x/text/language"
)

// Matcher is an autogenerated mock type for the Matcher type
type Matcher struct {
	mock.Mock
}

// Match provides a mock function with given fields: t
func (_m *Matcher) Match(t ...language.Tag) (language.Tag, int, language.Confidence) {
	_va := make([]interface{}, len(t))
	for _i := range t {
		_va[_i] = t[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 language.Tag
	if rf, ok := ret.Get(0).(func(...language.Tag) language.Tag); ok {
		r0 = rf(t...)
	} else {
		r0 = ret.Get(0).(language.Tag)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(...language.Tag) int); ok {
		r1 = rf(t...)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 language.Confidence
	if rf, ok := ret.Get(2).(func(...language.Tag) language.Confidence); ok {
		r2 = rf(t...)
	} else {
		r2 = ret.Get(2).(language.Confidence)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewMatcher interface {
	mock.TestingT
	Cleanup(func())
}

// NewMatcher creates a new instance of Matcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMatcher(t mockConstructorTestingTNewMatcher) *Matcher {
	mock := &Matcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
