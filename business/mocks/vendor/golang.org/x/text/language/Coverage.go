// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	language "golang.org/x/text/language"
)

// Coverage is an autogenerated mock type for the Coverage type
type Coverage struct {
	mock.Mock
}

// BaseLanguages provides a mock function with given fields:
func (_m *Coverage) BaseLanguages() []language.Base {
	ret := _m.Called()

	var r0 []language.Base
	if rf, ok := ret.Get(0).(func() []language.Base); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]language.Base)
		}
	}

	return r0
}

// Regions provides a mock function with given fields:
func (_m *Coverage) Regions() []language.Region {
	ret := _m.Called()

	var r0 []language.Region
	if rf, ok := ret.Get(0).(func() []language.Region); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]language.Region)
		}
	}

	return r0
}

// Scripts provides a mock function with given fields:
func (_m *Coverage) Scripts() []language.Script {
	ret := _m.Called()

	var r0 []language.Script
	if rf, ok := ret.Get(0).(func() []language.Script); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]language.Script)
		}
	}

	return r0
}

// Tags provides a mock function with given fields:
func (_m *Coverage) Tags() []language.Tag {
	ret := _m.Called()

	var r0 []language.Tag
	if rf, ok := ret.Get(0).(func() []language.Tag); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]language.Tag)
		}
	}

	return r0
}

type mockConstructorTestingTNewCoverage interface {
	mock.TestingT
	Cleanup(func())
}

// NewCoverage creates a new instance of Coverage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCoverage(t mockConstructorTestingTNewCoverage) *Coverage {
	mock := &Coverage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
