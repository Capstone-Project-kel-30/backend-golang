// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	reflect "reflect"

	mock "github.com/stretchr/testify/mock"

	schema "gorm.io/gorm/schema"
)

// SerializerInterface is an autogenerated mock type for the SerializerInterface type
type SerializerInterface struct {
	mock.Mock
}

// Scan provides a mock function with given fields: ctx, field, dst, dbValue
func (_m *SerializerInterface) Scan(ctx context.Context, field *schema.Field, dst reflect.Value, dbValue interface{}) error {
	ret := _m.Called(ctx, field, dst, dbValue)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *schema.Field, reflect.Value, interface{}) error); ok {
		r0 = rf(ctx, field, dst, dbValue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Value provides a mock function with given fields: ctx, field, dst, fieldValue
func (_m *SerializerInterface) Value(ctx context.Context, field *schema.Field, dst reflect.Value, fieldValue interface{}) (interface{}, error) {
	ret := _m.Called(ctx, field, dst, fieldValue)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, *schema.Field, reflect.Value, interface{}) interface{}); ok {
		r0 = rf(ctx, field, dst, fieldValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *schema.Field, reflect.Value, interface{}) error); ok {
		r1 = rf(ctx, field, dst, fieldValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSerializerInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewSerializerInterface creates a new instance of SerializerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSerializerInterface(t mockConstructorTestingTNewSerializerInterface) *SerializerInterface {
	mock := &SerializerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
