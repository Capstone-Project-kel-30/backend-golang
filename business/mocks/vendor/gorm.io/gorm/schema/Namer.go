// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	schema "gorm.io/gorm/schema"
)

// Namer is an autogenerated mock type for the Namer type
type Namer struct {
	mock.Mock
}

// CheckerName provides a mock function with given fields: table, column
func (_m *Namer) CheckerName(table string, column string) string {
	ret := _m.Called(table, column)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(table, column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ColumnName provides a mock function with given fields: table, column
func (_m *Namer) ColumnName(table string, column string) string {
	ret := _m.Called(table, column)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(table, column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IndexName provides a mock function with given fields: table, column
func (_m *Namer) IndexName(table string, column string) string {
	ret := _m.Called(table, column)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(table, column)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// JoinTableName provides a mock function with given fields: joinTable
func (_m *Namer) JoinTableName(joinTable string) string {
	ret := _m.Called(joinTable)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(joinTable)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RelationshipFKName provides a mock function with given fields: _a0
func (_m *Namer) RelationshipFKName(_a0 schema.Relationship) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(schema.Relationship) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SchemaName provides a mock function with given fields: table
func (_m *Namer) SchemaName(table string) string {
	ret := _m.Called(table)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(table)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TableName provides a mock function with given fields: table
func (_m *Namer) TableName(table string) string {
	ret := _m.Called(table)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(table)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewNamer interface {
	mock.TestingT
	Cleanup(func())
}

// NewNamer creates a new instance of Namer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNamer(t mockConstructorTestingTNewNamer) *Namer {
	mock := &Namer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
