// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// jsonNumber is an autogenerated mock type for the jsonNumber type
type jsonNumber struct {
	mock.Mock
}

// Float64 provides a mock function with given fields:
func (_m *jsonNumber) Float64() (float64, error) {
	ret := _m.Called()

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Int64 provides a mock function with given fields:
func (_m *jsonNumber) Int64() (int64, error) {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// String provides a mock function with given fields:
func (_m *jsonNumber) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTnewJsonNumber interface {
	mock.TestingT
	Cleanup(func())
}

// newJsonNumber creates a new instance of jsonNumber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newJsonNumber(t mockConstructorTestingTnewJsonNumber) *jsonNumber {
	mock := &jsonNumber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
