// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	ast "github.com/pelletier/go-toml/v2/internal/ast"
	mock "github.com/stretchr/testify/mock"

	reflect "reflect"
)

// handlerFn is an autogenerated mock type for the handlerFn type
type handlerFn struct {
	mock.Mock
}

// Execute provides a mock function with given fields: key, v
func (_m *handlerFn) Execute(key ast.Iterator, v reflect.Value) (reflect.Value, error) {
	ret := _m.Called(key, v)

	var r0 reflect.Value
	if rf, ok := ret.Get(0).(func(ast.Iterator, reflect.Value) reflect.Value); ok {
		r0 = rf(key, v)
	} else {
		r0 = ret.Get(0).(reflect.Value)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ast.Iterator, reflect.Value) error); ok {
		r1 = rf(key, v)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewHandlerFn interface {
	mock.TestingT
	Cleanup(func())
}

// newHandlerFn creates a new instance of handlerFn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newHandlerFn(t mockConstructorTestingTnewHandlerFn) *handlerFn {
	mock := &handlerFn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
