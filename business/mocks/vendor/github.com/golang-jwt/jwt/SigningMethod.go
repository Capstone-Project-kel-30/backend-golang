// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// SigningMethod is an autogenerated mock type for the SigningMethod type
type SigningMethod struct {
	mock.Mock
}

// Alg provides a mock function with given fields:
func (_m *SigningMethod) Alg() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Sign provides a mock function with given fields: signingString, key
func (_m *SigningMethod) Sign(signingString string, key interface{}) (string, error) {
	ret := _m.Called(signingString, key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, interface{}) string); ok {
		r0 = rf(signingString, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(signingString, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Verify provides a mock function with given fields: signingString, signature, key
func (_m *SigningMethod) Verify(signingString string, signature string, key interface{}) error {
	ret := _m.Called(signingString, signature, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, interface{}) error); ok {
		r0 = rf(signingString, signature, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSigningMethod interface {
	mock.TestingT
	Cleanup(func())
}

// NewSigningMethod creates a new instance of SigningMethod. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSigningMethod(t mockConstructorTestingTNewSigningMethod) *SigningMethod {
	mock := &SigningMethod{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
