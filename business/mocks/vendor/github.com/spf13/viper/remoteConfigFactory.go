// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	io "io"

	viper "github.com/spf13/viper"
	mock "github.com/stretchr/testify/mock"
)

// remoteConfigFactory is an autogenerated mock type for the remoteConfigFactory type
type remoteConfigFactory struct {
	mock.Mock
}

// Get provides a mock function with given fields: rp
func (_m *remoteConfigFactory) Get(rp viper.RemoteProvider) (io.Reader, error) {
	ret := _m.Called(rp)

	var r0 io.Reader
	if rf, ok := ret.Get(0).(func(viper.RemoteProvider) io.Reader); ok {
		r0 = rf(rp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(viper.RemoteProvider) error); ok {
		r1 = rf(rp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Watch provides a mock function with given fields: rp
func (_m *remoteConfigFactory) Watch(rp viper.RemoteProvider) (io.Reader, error) {
	ret := _m.Called(rp)

	var r0 io.Reader
	if rf, ok := ret.Get(0).(func(viper.RemoteProvider) io.Reader); ok {
		r0 = rf(rp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(viper.RemoteProvider) error); ok {
		r1 = rf(rp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchChannel provides a mock function with given fields: rp
func (_m *remoteConfigFactory) WatchChannel(rp viper.RemoteProvider) (<-chan *viper.RemoteResponse, chan bool) {
	ret := _m.Called(rp)

	var r0 <-chan *viper.RemoteResponse
	if rf, ok := ret.Get(0).(func(viper.RemoteProvider) <-chan *viper.RemoteResponse); ok {
		r0 = rf(rp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *viper.RemoteResponse)
		}
	}

	var r1 chan bool
	if rf, ok := ret.Get(1).(func(viper.RemoteProvider) chan bool); ok {
		r1 = rf(rp)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(chan bool)
		}
	}

	return r0, r1
}

type mockConstructorTestingTnewRemoteConfigFactory interface {
	mock.TestingT
	Cleanup(func())
}

// newRemoteConfigFactory creates a new instance of remoteConfigFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newRemoteConfigFactory(t mockConstructorTestingTnewRemoteConfigFactory) *remoteConfigFactory {
	mock := &remoteConfigFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
