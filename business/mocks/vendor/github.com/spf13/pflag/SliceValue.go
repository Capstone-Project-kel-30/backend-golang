// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// SliceValue is an autogenerated mock type for the SliceValue type
type SliceValue struct {
	mock.Mock
}

// Append provides a mock function with given fields: _a0
func (_m *SliceValue) Append(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSlice provides a mock function with given fields:
func (_m *SliceValue) GetSlice() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Replace provides a mock function with given fields: _a0
func (_m *SliceValue) Replace(_a0 []string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSliceValue interface {
	mock.TestingT
	Cleanup(func())
}

// NewSliceValue creates a new instance of SliceValue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSliceValue(t mockConstructorTestingTNewSliceValue) *SliceValue {
	mock := &SliceValue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
