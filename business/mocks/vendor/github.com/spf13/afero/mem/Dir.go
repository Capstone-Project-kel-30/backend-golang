// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mem "github.com/spf13/afero/mem"
	mock "github.com/stretchr/testify/mock"
)

// Dir is an autogenerated mock type for the Dir type
type Dir struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0
func (_m *Dir) Add(_a0 *mem.FileData) {
	_m.Called(_a0)
}

// Files provides a mock function with given fields:
func (_m *Dir) Files() []*mem.FileData {
	ret := _m.Called()

	var r0 []*mem.FileData
	if rf, ok := ret.Get(0).(func() []*mem.FileData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*mem.FileData)
		}
	}

	return r0
}

// Len provides a mock function with given fields:
func (_m *Dir) Len() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Names provides a mock function with given fields:
func (_m *Dir) Names() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Remove provides a mock function with given fields: _a0
func (_m *Dir) Remove(_a0 *mem.FileData) {
	_m.Called(_a0)
}

type mockConstructorTestingTNewDir interface {
	mock.TestingT
	Cleanup(func())
}

// NewDir creates a new instance of Dir. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDir(t mockConstructorTestingTNewDir) *Dir {
	mock := &Dir{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
