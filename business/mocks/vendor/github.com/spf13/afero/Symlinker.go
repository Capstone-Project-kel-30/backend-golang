// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	fs "io/fs"

	mock "github.com/stretchr/testify/mock"
)

// Symlinker is an autogenerated mock type for the Symlinker type
type Symlinker struct {
	mock.Mock
}

// LstatIfPossible provides a mock function with given fields: name
func (_m *Symlinker) LstatIfPossible(name string) (fs.FileInfo, bool, error) {
	ret := _m.Called(name)

	var r0 fs.FileInfo
	if rf, ok := ret.Get(0).(func(string) fs.FileInfo); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fs.FileInfo)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ReadlinkIfPossible provides a mock function with given fields: name
func (_m *Symlinker) ReadlinkIfPossible(name string) (string, error) {
	ret := _m.Called(name)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SymlinkIfPossible provides a mock function with given fields: oldname, newname
func (_m *Symlinker) SymlinkIfPossible(oldname string, newname string) error {
	ret := _m.Called(oldname, newname)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(oldname, newname)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSymlinker interface {
	mock.TestingT
	Cleanup(func())
}

// NewSymlinker creates a new instance of Symlinker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSymlinker(t mockConstructorTestingTNewSymlinker) *Symlinker {
	mock := &Symlinker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
