// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"
)

// BasicAuthValidator is an autogenerated mock type for the BasicAuthValidator type
type BasicAuthValidator struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0, _a1, _a2
func (_m *BasicAuthValidator) Execute(_a0 string, _a1 string, _a2 echo.Context) (bool, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, echo.Context) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, echo.Context) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBasicAuthValidator interface {
	mock.TestingT
	Cleanup(func())
}

// NewBasicAuthValidator creates a new instance of BasicAuthValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBasicAuthValidator(t mockConstructorTestingTNewBasicAuthValidator) *BasicAuthValidator {
	mock := &BasicAuthValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
