// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	reflect "reflect"

	mock "github.com/stretchr/testify/mock"
)

// DecodeHookFuncValue is an autogenerated mock type for the DecodeHookFuncValue type
type DecodeHookFuncValue struct {
	mock.Mock
}

// Execute provides a mock function with given fields: from, to
func (_m *DecodeHookFuncValue) Execute(from reflect.Value, to reflect.Value) (interface{}, error) {
	ret := _m.Called(from, to)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(reflect.Value, reflect.Value) interface{}); ok {
		r0 = rf(from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(reflect.Value, reflect.Value) error); ok {
		r1 = rf(from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDecodeHookFuncValue interface {
	mock.TestingT
	Cleanup(func())
}

// NewDecodeHookFuncValue creates a new instance of DecodeHookFuncValue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDecodeHookFuncValue(t mockConstructorTestingTNewDecodeHookFuncValue) *DecodeHookFuncValue {
	mock := &DecodeHookFuncValue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
