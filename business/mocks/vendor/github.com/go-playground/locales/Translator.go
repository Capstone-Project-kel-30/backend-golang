// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	locales "github.com/go-playground/locales"
	currency "github.com/go-playground/locales/currency"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Translator is an autogenerated mock type for the Translator type
type Translator struct {
	mock.Mock
}

// CardinalPluralRule provides a mock function with given fields: num, v
func (_m *Translator) CardinalPluralRule(num float64, v uint64) locales.PluralRule {
	ret := _m.Called(num, v)

	var r0 locales.PluralRule
	if rf, ok := ret.Get(0).(func(float64, uint64) locales.PluralRule); ok {
		r0 = rf(num, v)
	} else {
		r0 = ret.Get(0).(locales.PluralRule)
	}

	return r0
}

// FmtAccounting provides a mock function with given fields: num, v, _a2
func (_m *Translator) FmtAccounting(num float64, v uint64, _a2 currency.Type) string {
	ret := _m.Called(num, v, _a2)

	var r0 string
	if rf, ok := ret.Get(0).(func(float64, uint64, currency.Type) string); ok {
		r0 = rf(num, v, _a2)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FmtCurrency provides a mock function with given fields: num, v, _a2
func (_m *Translator) FmtCurrency(num float64, v uint64, _a2 currency.Type) string {
	ret := _m.Called(num, v, _a2)

	var r0 string
	if rf, ok := ret.Get(0).(func(float64, uint64, currency.Type) string); ok {
		r0 = rf(num, v, _a2)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FmtDateFull provides a mock function with given fields: t
func (_m *Translator) FmtDateFull(t time.Time) string {
	ret := _m.Called(t)

	var r0 string
	if rf, ok := ret.Get(0).(func(time.Time) string); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FmtDateLong provides a mock function with given fields: t
func (_m *Translator) FmtDateLong(t time.Time) string {
	ret := _m.Called(t)

	var r0 string
	if rf, ok := ret.Get(0).(func(time.Time) string); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FmtDateMedium provides a mock function with given fields: t
func (_m *Translator) FmtDateMedium(t time.Time) string {
	ret := _m.Called(t)

	var r0 string
	if rf, ok := ret.Get(0).(func(time.Time) string); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FmtDateShort provides a mock function with given fields: t
func (_m *Translator) FmtDateShort(t time.Time) string {
	ret := _m.Called(t)

	var r0 string
	if rf, ok := ret.Get(0).(func(time.Time) string); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FmtNumber provides a mock function with given fields: num, v
func (_m *Translator) FmtNumber(num float64, v uint64) string {
	ret := _m.Called(num, v)

	var r0 string
	if rf, ok := ret.Get(0).(func(float64, uint64) string); ok {
		r0 = rf(num, v)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FmtPercent provides a mock function with given fields: num, v
func (_m *Translator) FmtPercent(num float64, v uint64) string {
	ret := _m.Called(num, v)

	var r0 string
	if rf, ok := ret.Get(0).(func(float64, uint64) string); ok {
		r0 = rf(num, v)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FmtTimeFull provides a mock function with given fields: t
func (_m *Translator) FmtTimeFull(t time.Time) string {
	ret := _m.Called(t)

	var r0 string
	if rf, ok := ret.Get(0).(func(time.Time) string); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FmtTimeLong provides a mock function with given fields: t
func (_m *Translator) FmtTimeLong(t time.Time) string {
	ret := _m.Called(t)

	var r0 string
	if rf, ok := ret.Get(0).(func(time.Time) string); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FmtTimeMedium provides a mock function with given fields: t
func (_m *Translator) FmtTimeMedium(t time.Time) string {
	ret := _m.Called(t)

	var r0 string
	if rf, ok := ret.Get(0).(func(time.Time) string); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FmtTimeShort provides a mock function with given fields: t
func (_m *Translator) FmtTimeShort(t time.Time) string {
	ret := _m.Called(t)

	var r0 string
	if rf, ok := ret.Get(0).(func(time.Time) string); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Locale provides a mock function with given fields:
func (_m *Translator) Locale() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MonthAbbreviated provides a mock function with given fields: month
func (_m *Translator) MonthAbbreviated(month time.Month) string {
	ret := _m.Called(month)

	var r0 string
	if rf, ok := ret.Get(0).(func(time.Month) string); ok {
		r0 = rf(month)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MonthNarrow provides a mock function with given fields: month
func (_m *Translator) MonthNarrow(month time.Month) string {
	ret := _m.Called(month)

	var r0 string
	if rf, ok := ret.Get(0).(func(time.Month) string); ok {
		r0 = rf(month)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MonthWide provides a mock function with given fields: month
func (_m *Translator) MonthWide(month time.Month) string {
	ret := _m.Called(month)

	var r0 string
	if rf, ok := ret.Get(0).(func(time.Month) string); ok {
		r0 = rf(month)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MonthsAbbreviated provides a mock function with given fields:
func (_m *Translator) MonthsAbbreviated() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MonthsNarrow provides a mock function with given fields:
func (_m *Translator) MonthsNarrow() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MonthsWide provides a mock function with given fields:
func (_m *Translator) MonthsWide() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// OrdinalPluralRule provides a mock function with given fields: num, v
func (_m *Translator) OrdinalPluralRule(num float64, v uint64) locales.PluralRule {
	ret := _m.Called(num, v)

	var r0 locales.PluralRule
	if rf, ok := ret.Get(0).(func(float64, uint64) locales.PluralRule); ok {
		r0 = rf(num, v)
	} else {
		r0 = ret.Get(0).(locales.PluralRule)
	}

	return r0
}

// PluralsCardinal provides a mock function with given fields:
func (_m *Translator) PluralsCardinal() []locales.PluralRule {
	ret := _m.Called()

	var r0 []locales.PluralRule
	if rf, ok := ret.Get(0).(func() []locales.PluralRule); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]locales.PluralRule)
		}
	}

	return r0
}

// PluralsOrdinal provides a mock function with given fields:
func (_m *Translator) PluralsOrdinal() []locales.PluralRule {
	ret := _m.Called()

	var r0 []locales.PluralRule
	if rf, ok := ret.Get(0).(func() []locales.PluralRule); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]locales.PluralRule)
		}
	}

	return r0
}

// PluralsRange provides a mock function with given fields:
func (_m *Translator) PluralsRange() []locales.PluralRule {
	ret := _m.Called()

	var r0 []locales.PluralRule
	if rf, ok := ret.Get(0).(func() []locales.PluralRule); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]locales.PluralRule)
		}
	}

	return r0
}

// RangePluralRule provides a mock function with given fields: num1, v1, num2, v2
func (_m *Translator) RangePluralRule(num1 float64, v1 uint64, num2 float64, v2 uint64) locales.PluralRule {
	ret := _m.Called(num1, v1, num2, v2)

	var r0 locales.PluralRule
	if rf, ok := ret.Get(0).(func(float64, uint64, float64, uint64) locales.PluralRule); ok {
		r0 = rf(num1, v1, num2, v2)
	} else {
		r0 = ret.Get(0).(locales.PluralRule)
	}

	return r0
}

// WeekdayAbbreviated provides a mock function with given fields: weekday
func (_m *Translator) WeekdayAbbreviated(weekday time.Weekday) string {
	ret := _m.Called(weekday)

	var r0 string
	if rf, ok := ret.Get(0).(func(time.Weekday) string); ok {
		r0 = rf(weekday)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// WeekdayNarrow provides a mock function with given fields: weekday
func (_m *Translator) WeekdayNarrow(weekday time.Weekday) string {
	ret := _m.Called(weekday)

	var r0 string
	if rf, ok := ret.Get(0).(func(time.Weekday) string); ok {
		r0 = rf(weekday)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// WeekdayShort provides a mock function with given fields: weekday
func (_m *Translator) WeekdayShort(weekday time.Weekday) string {
	ret := _m.Called(weekday)

	var r0 string
	if rf, ok := ret.Get(0).(func(time.Weekday) string); ok {
		r0 = rf(weekday)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// WeekdayWide provides a mock function with given fields: weekday
func (_m *Translator) WeekdayWide(weekday time.Weekday) string {
	ret := _m.Called(weekday)

	var r0 string
	if rf, ok := ret.Get(0).(func(time.Weekday) string); ok {
		r0 = rf(weekday)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// WeekdaysAbbreviated provides a mock function with given fields:
func (_m *Translator) WeekdaysAbbreviated() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// WeekdaysNarrow provides a mock function with given fields:
func (_m *Translator) WeekdaysNarrow() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// WeekdaysShort provides a mock function with given fields:
func (_m *Translator) WeekdaysShort() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// WeekdaysWide provides a mock function with given fields:
func (_m *Translator) WeekdaysWide() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

type mockConstructorTestingTNewTranslator interface {
	mock.TestingT
	Cleanup(func())
}

// NewTranslator creates a new instance of Translator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTranslator(t mockConstructorTestingTNewTranslator) *Translator {
	mock := &Translator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
