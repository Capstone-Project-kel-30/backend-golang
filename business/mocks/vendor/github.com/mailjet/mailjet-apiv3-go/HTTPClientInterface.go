// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mailjet "github.com/mailjet/mailjet-apiv3-go"
	mock "github.com/stretchr/testify/mock"
)

// HTTPClientInterface is an autogenerated mock type for the HTTPClientInterface type
type HTTPClientInterface struct {
	mock.Mock
}

// APIKeyPrivate provides a mock function with given fields:
func (_m *HTTPClientInterface) APIKeyPrivate() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// APIKeyPublic provides a mock function with given fields:
func (_m *HTTPClientInterface) APIKeyPublic() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Call provides a mock function with given fields:
func (_m *HTTPClientInterface) Call() (int, int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func() int); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Client provides a mock function with given fields:
func (_m *HTTPClientInterface) Client() *http.Client {
	ret := _m.Called()

	var r0 *http.Client
	if rf, ok := ret.Get(0).(func() *http.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Client)
		}
	}

	return r0
}

// Read provides a mock function with given fields: response
func (_m *HTTPClientInterface) Read(response interface{}) mailjet.HTTPClientInterface {
	ret := _m.Called(response)

	var r0 mailjet.HTTPClientInterface
	if rf, ok := ret.Get(0).(func(interface{}) mailjet.HTTPClientInterface); ok {
		r0 = rf(response)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mailjet.HTTPClientInterface)
		}
	}

	return r0
}

// Send provides a mock function with given fields: req
func (_m *HTTPClientInterface) Send(req *http.Request) mailjet.HTTPClientInterface {
	ret := _m.Called(req)

	var r0 mailjet.HTTPClientInterface
	if rf, ok := ret.Get(0).(func(*http.Request) mailjet.HTTPClientInterface); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mailjet.HTTPClientInterface)
		}
	}

	return r0
}

// SendMailV31 provides a mock function with given fields: req
func (_m *HTTPClientInterface) SendMailV31(req *http.Request) (*http.Response, error) {
	ret := _m.Called(req)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(*http.Request) *http.Response); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetClient provides a mock function with given fields: client
func (_m *HTTPClientInterface) SetClient(client *http.Client) {
	_m.Called(client)
}

// With provides a mock function with given fields: headers
func (_m *HTTPClientInterface) With(headers map[string]string) mailjet.HTTPClientInterface {
	ret := _m.Called(headers)

	var r0 mailjet.HTTPClientInterface
	if rf, ok := ret.Get(0).(func(map[string]string) mailjet.HTTPClientInterface); ok {
		r0 = rf(headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mailjet.HTTPClientInterface)
		}
	}

	return r0
}

type mockConstructorTestingTNewHTTPClientInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewHTTPClientInterface creates a new instance of HTTPClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHTTPClientInterface(t mockConstructorTestingTNewHTTPClientInterface) *HTTPClientInterface {
	mock := &HTTPClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
