// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	pgproto3 "github.com/jackc/pgproto3/v2"
	mock "github.com/stretchr/testify/mock"
)

// QueryFuncRow is an autogenerated mock type for the QueryFuncRow type
type QueryFuncRow struct {
	mock.Mock
}

// FieldDescriptions provides a mock function with given fields:
func (_m *QueryFuncRow) FieldDescriptions() []pgproto3.FieldDescription {
	ret := _m.Called()

	var r0 []pgproto3.FieldDescription
	if rf, ok := ret.Get(0).(func() []pgproto3.FieldDescription); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pgproto3.FieldDescription)
		}
	}

	return r0
}

// RawValues provides a mock function with given fields:
func (_m *QueryFuncRow) RawValues() [][]byte {
	ret := _m.Called()

	var r0 [][]byte
	if rf, ok := ret.Get(0).(func() [][]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	return r0
}

type mockConstructorTestingTNewQueryFuncRow interface {
	mock.TestingT
	Cleanup(func())
}

// NewQueryFuncRow creates a new instance of QueryFuncRow. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQueryFuncRow(t mockConstructorTestingTNewQueryFuncRow) *QueryFuncRow {
	mock := &QueryFuncRow{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
