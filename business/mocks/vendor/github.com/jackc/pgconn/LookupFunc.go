// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// LookupFunc is an autogenerated mock type for the LookupFunc type
type LookupFunc struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, host
func (_m *LookupFunc) Execute(ctx context.Context, host string) ([]string, error) {
	ret := _m.Called(ctx, host)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, host)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, host)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewLookupFunc interface {
	mock.TestingT
	Cleanup(func())
}

// NewLookupFunc creates a new instance of LookupFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLookupFunc(t mockConstructorTestingTNewLookupFunc) *LookupFunc {
	mock := &LookupFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
