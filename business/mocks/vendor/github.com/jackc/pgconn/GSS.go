// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// GSS is an autogenerated mock type for the GSS type
type GSS struct {
	mock.Mock
}

// Continue provides a mock function with given fields: inToken
func (_m *GSS) Continue(inToken []byte) (bool, []byte, error) {
	ret := _m.Called(inToken)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]byte) bool); ok {
		r0 = rf(inToken)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 []byte
	if rf, ok := ret.Get(1).(func([]byte) []byte); ok {
		r1 = rf(inToken)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func([]byte) error); ok {
		r2 = rf(inToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInitToken provides a mock function with given fields: host, service
func (_m *GSS) GetInitToken(host string, service string) ([]byte, error) {
	ret := _m.Called(host, service)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, string) []byte); ok {
		r0 = rf(host, service)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(host, service)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInitTokenFromSPN provides a mock function with given fields: spn
func (_m *GSS) GetInitTokenFromSPN(spn string) ([]byte, error) {
	ret := _m.Called(spn)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(spn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(spn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGSS interface {
	mock.TestingT
	Cleanup(func())
}

// NewGSS creates a new instance of GSS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGSS(t mockConstructorTestingTNewGSS) *GSS {
	mock := &GSS{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
