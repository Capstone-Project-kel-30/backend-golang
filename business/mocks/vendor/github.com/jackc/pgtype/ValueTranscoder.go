// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	pgtype "github.com/jackc/pgtype"
	mock "github.com/stretchr/testify/mock"
)

// ValueTranscoder is an autogenerated mock type for the ValueTranscoder type
type ValueTranscoder struct {
	mock.Mock
}

// AssignTo provides a mock function with given fields: dst
func (_m *ValueTranscoder) AssignTo(dst interface{}) error {
	ret := _m.Called(dst)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(dst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DecodeBinary provides a mock function with given fields: ci, src
func (_m *ValueTranscoder) DecodeBinary(ci *pgtype.ConnInfo, src []byte) error {
	ret := _m.Called(ci, src)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pgtype.ConnInfo, []byte) error); ok {
		r0 = rf(ci, src)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DecodeText provides a mock function with given fields: ci, src
func (_m *ValueTranscoder) DecodeText(ci *pgtype.ConnInfo, src []byte) error {
	ret := _m.Called(ci, src)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pgtype.ConnInfo, []byte) error); ok {
		r0 = rf(ci, src)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EncodeBinary provides a mock function with given fields: ci, buf
func (_m *ValueTranscoder) EncodeBinary(ci *pgtype.ConnInfo, buf []byte) ([]byte, error) {
	ret := _m.Called(ci, buf)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(*pgtype.ConnInfo, []byte) []byte); ok {
		r0 = rf(ci, buf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*pgtype.ConnInfo, []byte) error); ok {
		r1 = rf(ci, buf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EncodeText provides a mock function with given fields: ci, buf
func (_m *ValueTranscoder) EncodeText(ci *pgtype.ConnInfo, buf []byte) ([]byte, error) {
	ret := _m.Called(ci, buf)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(*pgtype.ConnInfo, []byte) []byte); ok {
		r0 = rf(ci, buf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*pgtype.ConnInfo, []byte) error); ok {
		r1 = rf(ci, buf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields:
func (_m *ValueTranscoder) Get() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Set provides a mock function with given fields: src
func (_m *ValueTranscoder) Set(src interface{}) error {
	ret := _m.Called(src)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(src)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewValueTranscoder interface {
	mock.TestingT
	Cleanup(func())
}

// NewValueTranscoder creates a new instance of ValueTranscoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewValueTranscoder(t mockConstructorTestingTNewValueTranscoder) *ValueTranscoder {
	mock := &ValueTranscoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
