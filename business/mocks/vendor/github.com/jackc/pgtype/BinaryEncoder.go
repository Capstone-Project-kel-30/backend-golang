// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	pgtype "github.com/jackc/pgtype"
	mock "github.com/stretchr/testify/mock"
)

// BinaryEncoder is an autogenerated mock type for the BinaryEncoder type
type BinaryEncoder struct {
	mock.Mock
}

// EncodeBinary provides a mock function with given fields: ci, buf
func (_m *BinaryEncoder) EncodeBinary(ci *pgtype.ConnInfo, buf []byte) ([]byte, error) {
	ret := _m.Called(ci, buf)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(*pgtype.ConnInfo, []byte) []byte); ok {
		r0 = rf(ci, buf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*pgtype.ConnInfo, []byte) error); ok {
		r1 = rf(ci, buf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBinaryEncoder interface {
	mock.TestingT
	Cleanup(func())
}

// NewBinaryEncoder creates a new instance of BinaryEncoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBinaryEncoder(t mockConstructorTestingTNewBinaryEncoder) *BinaryEncoder {
	mock := &BinaryEncoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
