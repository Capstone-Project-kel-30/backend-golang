// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	pgtype "github.com/jackc/pgtype"
	mock "github.com/stretchr/testify/mock"
)

// TypeValue is an autogenerated mock type for the TypeValue type
type TypeValue struct {
	mock.Mock
}

// AssignTo provides a mock function with given fields: dst
func (_m *TypeValue) AssignTo(dst interface{}) error {
	ret := _m.Called(dst)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(dst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields:
func (_m *TypeValue) Get() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// NewTypeValue provides a mock function with given fields:
func (_m *TypeValue) NewTypeValue() pgtype.Value {
	ret := _m.Called()

	var r0 pgtype.Value
	if rf, ok := ret.Get(0).(func() pgtype.Value); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgtype.Value)
		}
	}

	return r0
}

// Set provides a mock function with given fields: src
func (_m *TypeValue) Set(src interface{}) error {
	ret := _m.Called(src)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(src)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TypeName provides a mock function with given fields:
func (_m *TypeValue) TypeName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewTypeValue interface {
	mock.TestingT
	Cleanup(func())
}

// NewTypeValue creates a new instance of TypeValue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTypeValue(t mockConstructorTestingTNewTypeValue) *TypeValue {
	mock := &TypeValue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
