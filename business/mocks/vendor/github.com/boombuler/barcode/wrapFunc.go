// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	color "image/color"

	mock "github.com/stretchr/testify/mock"
)

// wrapFunc is an autogenerated mock type for the wrapFunc type
type wrapFunc struct {
	mock.Mock
}

// Execute provides a mock function with given fields: x, y
func (_m *wrapFunc) Execute(x int, y int) color.Color {
	ret := _m.Called(x, y)

	var r0 color.Color
	if rf, ok := ret.Get(0).(func(int, int) color.Color); ok {
		r0 = rf(x, y)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(color.Color)
		}
	}

	return r0
}

type mockConstructorTestingTnewWrapFunc interface {
	mock.TestingT
	Cleanup(func())
}

// newWrapFunc creates a new instance of wrapFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newWrapFunc(t mockConstructorTestingTnewWrapFunc) *wrapFunc {
	mock := &wrapFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
