// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	qr "github.com/boombuler/barcode/qr"
	mock "github.com/stretchr/testify/mock"

	utils "github.com/boombuler/barcode/utils"
)

// encodeFn is an autogenerated mock type for the encodeFn type
type encodeFn struct {
	mock.Mock
}

// Execute provides a mock function with given fields: content, eccLevel
func (_m *encodeFn) Execute(content string, eccLevel qr.ErrorCorrectionLevel) (*utils.BitList, *qr.versionInfo, error) {
	ret := _m.Called(content, eccLevel)

	var r0 *utils.BitList
	if rf, ok := ret.Get(0).(func(string, qr.ErrorCorrectionLevel) *utils.BitList); ok {
		r0 = rf(content, eccLevel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.BitList)
		}
	}

	var r1 *qr.versionInfo
	if rf, ok := ret.Get(1).(func(string, qr.ErrorCorrectionLevel) *qr.versionInfo); ok {
		r1 = rf(content, eccLevel)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*qr.versionInfo)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, qr.ErrorCorrectionLevel) error); ok {
		r2 = rf(content, eccLevel)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTnewEncodeFn interface {
	mock.TestingT
	Cleanup(func())
}

// newEncodeFn creates a new instance of encodeFn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newEncodeFn(t mockConstructorTestingTnewEncodeFn) *encodeFn {
	mock := &encodeFn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
